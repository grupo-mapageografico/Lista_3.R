#carregando os Pacotes
install.packages("leaflet")
library(leaflet)

#Pega o local da UNB
#Seleciona as cordenadas
m <- leaflet() %>% setView(lng = -47.869035, lat = -15.758656, zoom = 16)
#Seleciona as cordenadas
m %>% addTiles()
d<- m

#Como alternativa, muitos mapas base populares gratuitos de terceiros podem ser adicionados usando a addProviderTiles()função, que é implementada usando o plugin de fornecedores de folhetos .
#Não precise se lembrar ou procurar fornecedores de blocos suportados; basta digitar providers$e escolher uma das opções. Você também pode usar names(providers)para visualizar todas as opções.

#Exemplos:

m %>% addProviderTiles(providers$Stamen.Toner)
m <- d
m %>% addProviderTiles(providers$CartoDB.Positron)

#Alguns provedores de conjuntos de blocos exigem que você se registre
#Você pode passar tokens / chaves de acesso e outras opções para o provedor de tile.

## Modelo de URL de bloco personalizado

#Você pode usar addWMSTiles()para adicionar blocos WMS (Web Map Service). O mapa abaixo mostra a refletividade da base (uma medida da intensidade da precipitação que ocorre) usando o WMS da Mesonet Ambiental de Iowa :

leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 4) %>%
  addWMSTiles(
    "http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
    layers = "nexrad-n0r-900913",
    options = WMSTileOptions(format = "image/png", transparent = TRUE),
    attribution = "Weather data © 2012 IEM Nexrad"
  )


#Combinando camadas de ladrilhos
#você pode empilhá-los adicionando várias camadas de mosaico
#Geralmente, isso só faz sentido se os ladrilhos da frente consistirem em ladrilhos semi-transparentes ou tiverem uma opacidade ajustada por meio do optionsargumento

m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
                 options = providerTileOptions(opacity = 0.35)) %>%
  addProviderTiles(providers$Stamen.TonerLabels)


#POPUP

m <- leaflet() %>% setView(lng = -47.869685, lat = -15.763306, zoom = 16)
m %>% addTiles()

content <- paste(sep = "<br/>",
                 "<b><a href='http://www.unb.br/'>Unb Site</a></b>",
                 "ICC",
                 "Unb"
)

leaflet() %>% addTiles() %>%
  addPopups(lng = -47.869685, lat = -15.763306, content,
            options = popupOptions(closeButton = FALSE)
  )

#Um uso comum para pop-ups é fazê-los aparecer quando clicam em marcadores ou formas. 


library(htmltools)

df <- read.csv(textConnection(
  "Name,Lat,Long
  Departamento de Estatística ,-15.758656,-47.869035
  ICC,-15.763306,-47.869685
  Restaurante Universitario,-15.764253,-47.870273"
))

leaflet(df) %>% addTiles() %>%
  addMarkers(~Long, ~Lat, popup = ~htmlEscape(Name))

#Etiquetas
#Um rótulo é um conteúdo textual ou HTML que pode ser anexado a marcadores e formas a serem sempre exibidos ou exibidos ao passar o mouse. Ao contrário dos pop-ups, você não precisa clicar em um marcador / polígono para que o rótulo seja mostrado.

df <- read.csv(textConnection(
  "Name,Lat,Long
  Departamento de Estatística ,-15.758656,-47.869035
  ICC,-15.763306,-47.869685
  Restaurante Universitario,-15.764253,-47.870273"
))

leaflet(df) %>% addTiles() %>%
  addMarkers(~Long, ~Lat, label = ~htmlEscape(Name))

#Personalizando etiquetas de marcador
#Você pode personalizar os rótulos dos marcadores usando o labelOptions

# Mudando o tamanho e o texto apenas utilizando um CSS customizado
leaflet() %>% addTiles() %>% setView(-47.871149,-15.761568,  16) %>%
  addMarkers(
    lng = -47.869685, lat = -15.763306,
    label = "Default ",
    labelOptions = labelOptions(noHide = T)) %>%
  addMarkers(
    lng = -47.870273, lat =-15.764253 ,
    label = "Popup s/ fundo",
    labelOptions = labelOptions(noHide = T, textOnly = TRUE)) %>%
  addMarkers(
    lng = -47.869035, lat = -15.758656,
    label = "Popup com Fonte 15px",
    labelOptions = labelOptions(noHide = T, textsize = "15px")) %>%
  addMarkers(
    lng = -47.871453, lat = -15.760986,
    label = "Popup com estilo CSS",
    labelOptions = labelOptions(noHide = T, direction = "bottom",
                                style = list(
                                  "color" = "red",
                                  "font-family" = "serif",
                                  "font-style" = "italic",
                                  "box-shadow" = "3px 3px rgba(0,0,0,0.25)",
                                  "font-size" = "12px",
                                  "border-color" = "rgba(0,0,0,0.5)"
                                )))

#Círculos

cities <- read.csv(textConnection("City,Lat,Long,Pop
Departamento de Estatística ,-15.758656,-47.869035,3
ICC,-15.763306,-47.869685,30
Restaurante Universitario,-15.764253,-47.870273,15
                                  "))

leaflet(cities) %>% addTiles() %>%
  addCircles(lng = ~Long, lat = ~Lat, weight = 1,
             radius = ~sqrt(Pop) * 30, popup = ~City
  )

#Retangulos
#Retângulos são adicionados usando a addRectangles()função É preciso lng1, lng2, lat1, e lat2

leaflet() %>% addTiles() %>%
  addRectangles(
    lat1=-15.765073, lng1=-47.866681,
    lat2=-15.760592, lng2= -47.871563,
    fillColor = "transparent"
  )

















Usando o Google way

# trançando rotas

library(googleway)

 #Entrar com sua API do google Clound

api_key <- "AIzaSyAWuKwOIkJW9DFsvwWYkiJGhBOu8H63u_g"
map_key <- "AIzaSyAWuKwOIkJW9DFsvwWYkiJGhBOu8H63u_g"

## Definindo um dataframe com as localizações

## Pode usar Lat/Long tambem

df_locations <- data.frame(
  origin = c("rodoviaria estacao central, brasilia")
  , destination = c( "icc unb brasilia")
  , stringsAsFactors = F
)

## passa por cada local e extrai a linha do resultado

lst_directions <- apply(df_locations, 1, function(x){
  res <- google_directions(
    key = api_key
    , origin = x[['origin']]
    , destination = x[['destination']]
  )
  
  df_result <- data.frame(
    origin = x[['origin']]
    , destination = x[['destination']]
    , route = res$routes$overview_polyline$points
  )
  return(df_result)
})

#Convertendo os resultados em dataframe
df_directions <- do.call(rbind, lst_directions)

## Gerando o mapa
google_map(key = map_key ) %>%
  add_polylines(data = df_directions, polyline = "route")


#google_geocode : geocodificação do Google

#A geocodificação é o processo de conversão de endereços (como "1600 Amphitheatre Parkway, Mountain View, CA") em coordenadas geográficas (como latitude 37.423021 e longitude -122.083739), que você pode usar para colocar marcadores em um mapa ou posicionar o mapa.

##https://stackoverflow.com/questions/14026759/how-to-get-all-places-or-specific-type-of-place-such-as-a-restaurant-in-a-city





## View the names of the returned restaurantes, and whether they are open or not

library(googleway)
library(leaflet)
library(htmltools)
library(tidyverse)
key <- "AIzaSyAWuKwOIkJW9DFsvwWYkiJGhBOu8H63u_g"
set_key("AIzaSyAWuKwOIkJW9DFsvwWYkiJGhBOu8H63u_g")

endereço <- function(x,y){
  df <- google_geocode(address = x,
                       simplify = TRUE)
  unlist((unname(df$results$geometry$location[y])))[1]
}


## View the names of the returned restaurantes, and whether they are open or not

coordenadas <- function(variavel) {
  res <- google_places(search_string = variavel,
                     key = key)
  resultados<-as.data.frame(cbind(res$results$name, res$results$opening_hours))
  names(resultados)<- c("nome","aberto")
  
  resultados<-resultados %>% mutate(nome=paste0(nome,", brasilia"))
  
  resultados$Long <- as.numeric(lapply(resultados$nome,endereço,y=2))
  resultados$Lat <- as.numeric(lapply(resultados$nome,endereço,y=1))
  
  
  
  map <-leaflet(resultados) %>% addTiles() %>%
    addMarkers(~Long, ~Lat, popup = ~htmlEscape(nome))
  return(map)
}
coordenadas("academias de brasilia")

}

####COLOCANDO AUDIO

library(shiny)
library(leaflet)
library(tidyverse)

df <- read.csv(textConnection(
    "Name,Lat,Long
  Departamento de Estatística ,-15.758656,-47.869035"))

setwd("C://Users//Gabriel//Music")
addResourcePath("www", "C:/Users/Gabriel/Music/www")
resposta<-tags$audio(src="www/teste.mp3",type = "audio/mp3",autoplay = NA,controls = NA)

#Você deve peder ao r "resposta", modificar as aspas duplas para simples e adicionar no campo de popup
ui <- fluidPage(
    leaflet(df) %>% addTiles() %>%
        addMarkers(~Long, ~Lat, popup = "<audio src='www/teste.mp3' type='audio/mp3' autoplay controls></audio>")
      )

server <- function(input, output, session) {
}

shinyApp(ui, server)

set_key<-"AIzaSyAWuKwOIkJW9DFsvwWYkiJGhBOu8H63u_g"





library(shiny)
library(googleway)






url <- 'https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv'
flights <- read.csv(url)
flights$id <- seq_len(nrow(flights))


## encode the routes as polylines
lst <- lapply(unique(flights$id), function(x){
  lat = c(flights[flights["id"] == x, c("start_lat")], flights[flights["id"] == x, c("end_lat")])
  lon = c(flights[flights["id"] == x, c("start_lon")], flights[flights["id"] == x, c("end_lon")])
  data.frame(id = x, polyline = encode_pl(lat = lat, lon = lon))
})

flights <- merge(flights, do.call(rbind, lst), by = "id")

style <- map_styles()$night

google_map(key = set_key, style = style) %>%
  add_polylines(data = flights, polyline = "polyline", mouse_over_group = "airport1",
                stroke_weight = 1, stroke_opacity = 0.3, stroke_colour = "#ccffff")


